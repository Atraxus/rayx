struct Collision {
    // The point where `_ray` hits the element, in element-coordinates.
    dvec3 hitpoint;

    // The normal of the surface at the hitpoint in element-coordinates.
    dvec3 normal;

    // The index of the element with which `_ray` collides.
    int elementIndex;

    // whether a collision has been found.
    bool found;
};

/**
 * calculates the intersection point of a ray with a quadric surface defined by a_11..a_44
 * @param r				ray for which the intersection is fount
 * @param a_11..a_44		define the quadric surface
 * @param icurv 			defines whether the first or the second intersection is used (1=first, -1=second)
 *
 * output: reflected Ray with intersection point as position and reflection as direction
 */
Collision getQuadricCollision(Ray r, uint id) {
    Collision col;
    col.found = true;
    col.elementIndex = int(id);
    col.hitpoint = dvec3(0, 0, 0);
    col.normal = dvec3(0, 0, 0);

    dmat4 quadric = surfaceParams(id);

    double a_11 = quadric[0][0];
    double a_12 = quadric[0][1];
    double a_13 = quadric[0][2];
    double a_14 = quadric[0][3];
    double a_22 = quadric[1][1];
    double a_23 = quadric[1][2];
    double a_24 = quadric[1][3];
    double a_33 = quadric[2][2];
    double a_34 = quadric[2][3];
    double a_44 = quadric[3][3];
    int icurv   = int(quadric[1][0]);

    int cs     = 1;
    int d_sign = icurv;
    if (abs(r.m_direction[1]) >= abs(r.m_direction[0]) && abs(r.m_direction[1]) >= abs(r.m_direction[2])) {
        cs = 2;
    } else if (abs(r.m_direction[2]) >= abs(r.m_direction[0]) && abs(r.m_direction[2]) >= abs(r.m_direction[1])) {
        cs = 3;
    }

    double x = 0;
    double y = 0;
    double z = 0;
    double a = 0;
    double b = 0;
    double c = 0;

    if (cs == 1) {
        double aml = r.m_direction[1] / r.m_direction[0];
        double anl = r.m_direction[2] / r.m_direction[0];
        y          = r.m_position[1] - aml * r.m_position[0];
        z          = r.m_position[2] - anl * r.m_position[0];
        d_sign     = int(sign(r.m_direction[0]) * icurv);

        a = a_11 + 2 * a_12 * aml + a_22 * aml * aml + 2 * a_13 * anl + 2 * a_23 * aml * anl + a_33 * anl * anl;
        b = a_14 + a_24 * aml + a_34 * anl + (a_12 + a_22 * aml + a_23 * anl) * y + (a_13 + a_23 * aml + a_33 * anl) * z;
        c = a_44 + a_22 * y * y + 2 * a_34 * z + a_33 * z * z + 2 * y * (a_24 + a_23 * z);

        double bbac = b * b - a * c;
        if (bbac < 0) {
            col.found = false;
        } else {
            if (abs(a) > abs(c) * 1e-10) {
                x = (-b + d_sign * sqrt(bbac)) / a;
            } else {
                x = (-c / 2) / b;
            }
        }
        y = y + aml * x;
        z = z + anl * x;
    } else if (cs == 2) {
        double alm = r.m_direction[0] / r.m_direction[1];
        double anm = r.m_direction[2] / r.m_direction[1];
        x          = r.m_position[0] - alm * r.m_position[1];
        z          = r.m_position[2] - anm * r.m_position[1];
        d_sign     = int(sign(r.m_direction[1]) * icurv);

        a = a_22 + 2 * a_12 * alm + a_11 * alm * alm + 2 * a_23 * anm + 2 * a_13 * alm * anm + a_33 * anm * anm;
        b = a_24 + a_14 * alm + a_34 * anm + (a_12 + a_11 * alm + a_13 * anm) * x + (a_23 + a_13 * alm + a_33 * anm) * z;
        c = a_44 + a_11 * x * x + 2 * a_34 * z + a_33 * z * z + 2 * x * (a_14 + a_13 * z);

        double bbac = b * b - a * c;
        if (bbac < 0) {
            col.found = false;
        } else {
            if (abs(a) > abs(c) * 1e-10) {
                y = (-b + d_sign * sqrt(bbac)) / a;
            } else {
                y = (-c / 2) / b;
            }
        }
        x = x + alm * y;
        z = z + anm * y;

    } else {
        double aln = r.m_direction[0] / r.m_direction[2];
        double amn = r.m_direction[1] / r.m_direction[2];
        // firstParam = aln;
        // secondParam = amn;
        x      = r.m_position[0] - aln * r.m_position[2];
        y      = r.m_position[1] - amn * r.m_position[2];
        d_sign = int(sign(r.m_direction[2]) * icurv);

        a = a_33 + 2 * a_13 * aln + a_11 * aln * aln + 2 * a_23 * amn + 2 * a_12 * aln * amn + a_22 * amn * amn;
        b = a_34 + a_14 * aln + a_24 * amn + (a_13 + a_11 * aln + a_12 * amn) * x + (a_23 + a_12 * aln + a_22 * amn) * y;
        c = a_44 + a_11 * x * x + 2 * a_24 * y + a_22 * y * y + 2 * x * (a_14 + a_12 * y);

        double bbac = b * b - a * c;
        if (bbac < 0) {
            col.found = false;
        } else {
            if (abs(a) > abs(c) * 1e-10) {  // pow(10, double(-10))) {
                z = (-b + d_sign * sqrt(bbac)) / a;
            } else {
                z = (-c / 2) / b;
            }
        }
        x = x + aln * z;
        y = y + amn * z;
        // r.m_position = dvec3(a, b, c);
    }

    // intersection point is in the negative direction (behind the position when the direction is followed forwards), set weight to 0
    if ((x - r.m_position.x) / r.m_direction.x < 0 || (y - r.m_position.y) / r.m_direction.y < 0 || (z - r.m_position.z) / r.m_direction.z < 0) {
        col.found = false;
    }

    col.hitpoint = dvec3(x, y, z);

    double fx = 2 * a_14 + 2 * a_11 * x + 2 * a_12 * y + 2 * a_13 * z;
    double fy = 2 * a_24 + 2 * a_12 * x + 2 * a_22 * y + 2 * a_23 * z;
    double fz = 2 * a_34 + 2 * a_13 * x + 2 * a_23 * y + 2 * a_33 * z;
    col.normal = normalize(dvec3(fx, fy, fz));
    return col;
}

/**
 * approximates intersection point with non-quadric element with Newton iteration
 *
 * @param r 				current ray
 * @return normal at intersection point, changes Ray position in place
 */
Collision getToroidCollision(Ray r, uint id) {
    double longRad = longRadius(id);
    double shortRad = shortRadius(id);

    Collision col;
    col.found = true;
    col.elementIndex = int(id);
    col.hitpoint = dvec3(0, 0, 0);
    col.normal = dvec3(0, 0, 0);

    double isigro = sign(shortRad);
    // sign radius: +1 = concave, -1 = convex

    int n = 0;
    // double aln = r.m_direction.x / r.m_direction.z;
    // double amn = r.m_direction.y / r.m_direction.z;

    dvec4 normal = dvec4(0, 0, 0, 0);
    double xx = 0.0;
    double zz = 0.0;
    double yy = 0.0;
    double dz = 0.0;
    dvec3 normalized_dir = dvec3(r.m_direction) / r.m_direction.z;

    // while not converted
    do {
        zz = zz + dz;
        xx = r.m_position.x + normalized_dir.x * (zz - r.m_position.z);
        if (xx * xx > shortRad * shortRad) {
            xx = xx / abs(xx) * 0.95 * shortRad;
        }
        yy        = r.m_position.y + normalized_dir.y * (zz - r.m_position.z);
        double sq = sqrt(shortRad * shortRad - xx * xx);
        double rx = (longRad - shortRad + isigro * sq);

        normal.x = (-2 * xx * isigro / sq) * rx;
        normal.y = -2 * (yy - longRad);
        normal.z = -2 * zz;

        double func = -rx * rx + (yy - longRad) * (yy - longRad) + zz * zz;
        double df   = normalized_dir.x * normal.x + normalized_dir.y * normal.y + normal.z;  // dot(normalized_dir, dvec3(normal));
        dz          = func / df;
        n += 1;
        if (n >= 50) {
            col.found = false;
            return col;
        }
    } while (abs(dz) > 0.0001);

    col.normal = normalize(dvec3(normal));
    col.hitpoint = dvec3(xx, yy, zz);
    return col;
}

/**
 * calculates and returns the intersection of a given ray with a given optical element
 * if element is not hit, return (inf, inf, inf, 0)
 * @param r						current Ray in global coordinates
 * @param id                    index of current optical element in list of all elements
 *
 * @return ELEMENT coordinates of intersection point of ray with optical element
 */
Collision find_collision_with(Ray r, uint id) {
    double ty = type(id);
    double sty = surfaceType(id);
    double x_extentA = widthA(id);
    double x_extentB = widthB(id);
    double z_extent  = height(id);

    if (ty == TY_RZP) {
        r.m_position.z = r.m_position.z - elements[id].m_elementParameters[3][2];
    }

    // _ray = rayMatrixMult(_ray, q.inTrans); // ray/global to element coordinates,

    // misalignment
    r = rayMatrixMult(r, inTrans(id));  // image plane is the x-y plane of the coordinate system

    if (sty == STY_INF_PLANE) {
        Collision col;
        col.found = false;
        col.elementIndex = int(id);
        col.normal = dvec3(0, -1, 0);
        double offset = abs(r.m_position.z / r.m_direction.z);

        // scale x-slope of ray (l/n) by z-length between origin and image plane
        col.hitpoint.x = r.m_position.x + r.m_direction.x * offset;
        col.hitpoint.y = r.m_position.y + r.m_direction.y * offset;
        col.hitpoint.z = 0;
        // the ray should not face away from the image plane. If that is the case, set the weight of the intersection to 0 so that it is not
        // considered in the tracing process also the image plane detects only rays from one side

        col.found = r.m_direction.z > 0 && r.m_position.z < 0;
        // backward hits are excluded? i.e. if a ray with negative direction and positive z coordinate hits the plane?

        return col;
    } else if (sty == STY_TOROID) {
        Collision col = getToroidCollision(r, id);
        if (!wasteBox(col.hitpoint.x, col.hitpoint.z, x_extentA, x_extentB, z_extent)) {
            col.found = false;
        }
        return col;
    } else if (sty == STY_QUADRIC) {
        Collision col = getQuadricCollision(r, id);
        if (!wasteBox(col.hitpoint.x, col.hitpoint.z, x_extentA, x_extentB, z_extent)) {
            col.found = false;
        }
        return col;
    } else {
        Collision col;
        col.found = false;
        col.elementIndex = int(id);

        #ifndef GLSL
        RAYX_ERR << "invalid surfaceType!";
        #endif
        return col; // has found = false
    }
}

Collision find_collision() {
    // global coordinates of first intersection point of ray among all elements in beamline
    Collision best_col;
    best_col.found = false;

    // the distance the ray has to travel to reach `best_col`.
    double best_dist = infinity();

    // Find intersection points through all elements
    for (uint elementIndex = 0; elementIndex < uint(elements.length()); elementIndex++) {
        double lastElement = _ray.m_lastElement;
        if (elementIndex + 1 == lastElement) {
            // TODO: self-intersection
            continue;
        }

        Collision current_col = find_collision_with(_ray, elementIndex);
        if (!current_col.found) {
            continue;
        }

        dvec3 global_hitpoint = dvec3(elements[elementIndex].m_outTrans * dvec4(current_col.hitpoint, 1));
        double current_dist = length(global_hitpoint - _ray.m_position);

        if (current_dist < best_dist) {
            best_col = current_col;
            best_dist = current_dist;
        }
    }

    return best_col;
}
