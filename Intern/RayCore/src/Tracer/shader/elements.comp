//////////////////////////////////////////////////////////////////
// This module defines functions to access the elements in a practical way.
//////////////////////////////////////////////////////////////////

/**************************************************************
 *                    Helper Structs
 **************************************************************/
struct Mirror { uint id; };
struct Grating { uint id; };
struct Slit { uint id; };
struct Rzp { uint id; };
struct ImagePlane { uint id; };

double param_e(uint id, uint x, uint y) { return elements[id].m_elementParameters[x][y]; }
double param_s(uint id, uint x, uint y) { return elements[id].m_surfaceParams[x][y]; }

/**************************************************************
 *      element-type independent access functions:
 **************************************************************/
double widthA(uint id) { return elements[id].m_widthA; }
double width(uint id) { return elements[id].m_widthA; }

double height(uint id) { return elements[id].m_height; }
double widthB(uint id) { return elements[id].m_widthB; }
double type(uint id) { return elements[id].m_type; }
double surfaceType(uint id) { return elements[id].m_surfaceType; }
double material(uint id) { return elements[id].m_material; }
double azimuthalAngle(uint id) { return elements[id].m_azimuthalAngle; }
dmat4 inTrans(uint id) { return elements[id].m_inTrans; }
dmat4 outTrans(uint id) { return elements[id].m_outTrans; }
double longRadius(uint id) { return param_s(id, 0, 0); }
double shortRadius(uint id) { return param_s(id, 0, 1); }

double slopeX(uint id) { return elements[id].m_slopeError[0]; }
double slopeZ(uint id) { return elements[id].m_slopeError[1]; }

dmat4 surfaceParams(uint id) { return elements[id].m_surfaceParams; }

/**************************************************************
 *                    Slit
 **************************************************************/
double width(Slit e) { return width(e.id); }
double height(Slit e) { return height(e.id); }
double beamstopWidth(Slit e) { return param_e(e.id, 0, 0); }
double beamstopHeight(Slit e) { return param_e(e.id, 0, 1); }
dmat4 surfaceParams(Slit e) { return surfaceParams(e.id); }

/**************************************************************
 *                    RZP
 **************************************************************/
double curvatureType(Rzp e) { return param_e(e.id, 1, 0); }
double elementOffsetZ(Rzp e) { return param_e(e.id, 3, 2); }
dmat4 surfaceParams(Rzp e) { return elements[e.id].m_surfaceParams; }
double longRadius(Rzp e) { return param_s(e.id, 0, 0); }
double shortRadius(Rzp e) { return param_s(e.id, 0, 1); }
double widthA(Rzp e) { return width(e.id); }
double widthB(Rzp e) { return widthB(e.id); }
double height(Rzp e) { return height(e.id); }
double slopeX(Rzp e) { return slopeX(e.id); }
double slopeZ(Rzp e) { return slopeZ(e.id); }
dmat4 elementParams(Rzp e) { return elements[e.id].m_elementParameters; }

/**************************************************************
 *                    Grating
 **************************************************************/
dmat4 surfaceParams(Grating e) { return elements[e.id].m_surfaceParams; }
double width(Grating e) { return width(e.id); }
double height(Grating e) { return height(e.id); }
double slopeX(Grating e) { return slopeX(e.id); }
double slopeZ(Grating e) { return slopeZ(e.id); }
dmat4 elementParams(Grating e) { return elements[e.id].m_elementParameters; }

/**************************************************************
 *                    Mirror
 **************************************************************/
dmat4 surfaceParams(Mirror e) { return elements[e.id].m_surfaceParams; }
double azimuthalAngle(Mirror e) { return azimuthalAngle(e.id); }
double widthA(Mirror e) { return widthA(e.id); }
double widthB(Mirror e) { return widthB(e.id); }
double height(Mirror e) { return height(e.id); }
double slopeX(Mirror e) { return slopeX(e.id); }
double slopeZ(Mirror e) { return slopeZ(e.id); }
double material(Mirror e) { return material(e.id); }
