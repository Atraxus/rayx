// This module defines functions to access the elements in a practical way.

struct BasicMirror { uint id; };
struct PlaneGrating { uint id; };
struct GeneralGrating { uint id; };
struct Slit { uint id; };
struct Rzp { uint id; };
struct ImagePlane { uint id; };
struct ToroidMirror { uint id; };
struct EllipsoidMirror { uint id; };

double param_e(uint id, uint x, uint y) { return quadricData[id].elementParameters[x][y]; }
double param_o(uint id, uint x, uint y) { return quadricData[id].objectParameters[x][y]; }
double param_s(uint id, uint x, uint y) { return quadricData[id].surfaceParams[x][y]; }

// element-type independent access functions:
double widthA(uint id) { return param_o(id, 0, 0); }
double height(uint id) { return param_o(id, 0, 1); }
double widthB(uint id) { return param_o(id, 2, 1); }
double type(uint id) { return param_s(id, 3, 0); }
dmat4 inTrans(uint id) { return quadricData[id].inTrans; }
dmat4 outTrans(uint id) { return quadricData[id].outTrans; }
double longRadius(uint id) { return param_s(id, 0, 0); }
double shortRadius(uint id) { return param_s(id, 0, 1); }
dmat4 surfaceParams(uint id) { return quadricData[id].surfaceParams; }

// Slit:
double width(Slit e) { return param_o(e.id, 0, 0); }
double height(Slit e) { return param_o(e.id, 0, 1); }
double beamstopWidth(Slit e) { return param_e(e.id, 0, 0); }
double beamstopHeight(Slit e) { return param_e(e.id, 0, 1); }
dmat4 surfaceParams(Slit e) { return quadricData[e.id].surfaceParams; }

// ToroidMirror:
double width(ToroidMirror e) { return param_o(e.id, 0, 0); }
double height(ToroidMirror e) { return param_o(e.id, 0, 1); }
double longRadius(ToroidMirror e) { return param_s(e.id, 0, 0); }
double shortRadius(ToroidMirror e) { return param_s(e.id, 0, 1); }
double slopeX(ToroidMirror e) { return param_o(e.id, 0, 2); }
double slopeZ(ToroidMirror e) { return param_o(e.id, 0, 3); }
double azimuthalAngle(ToroidMirror e) { return param_o(e.id, 2, 2); }
double material(ToroidMirror e) { return param_s(e.id, 3, 2); }

// Rzp:
double curvatureType(Rzp e) { return param_e(e.id, 1, 0); }
double elementOffsetZ(Rzp e) { return param_e(e.id, 3, 2); }
dmat4 surfaceParams(Rzp e) { return quadricData[e.id].surfaceParams; }
double longRadius(Rzp e) { return param_s(e.id, 0, 0); }
double shortRadius(Rzp e) { return param_s(e.id, 0, 1); }
double widthA(Rzp e) { return param_o(e.id, 0, 0); }
double widthB(Rzp e) { return param_o(e.id, 2, 1); }
double height(Rzp e) { return param_o(e.id, 0, 1); }
double slopeX(Rzp e) { return param_o(e.id, 0, 2); }
double slopeZ(Rzp e) { return param_o(e.id, 0, 3); }
dmat4 elementParams(Rzp e) { return quadricData[e.id].elementParameters; }

// EllipsoidMirror:
double sinTangentAngle(EllipsoidMirror e) { return param_e(e.id, 0, 0); }
double cosTangentAngle(EllipsoidMirror e) { return param_e(e.id, 0, 1); }
dmat4 surfaceParams(EllipsoidMirror e) { return quadricData[e.id].surfaceParams; }
double azimuthalAngle(EllipsoidMirror e) { return param_o(e.id, 2, 2); }
double width(EllipsoidMirror e) { return param_o(e.id, 0, 0); }
double height(EllipsoidMirror e) { return param_o(e.id, 0, 1); }
double slopeX(EllipsoidMirror e) { return param_o(e.id, 0, 2); }
double slopeZ(EllipsoidMirror e) { return param_o(e.id, 0, 3); }
double material(EllipsoidMirror e) { return param_s(e.id, 3, 2); }

// PlaneGrating:
dmat4 surfaceParams(PlaneGrating e) { return quadricData[e.id].surfaceParams; }
double width(PlaneGrating e) { return param_o(e.id, 0, 0); }
double height(PlaneGrating e) { return param_o(e.id, 0, 1); }
double slopeX(PlaneGrating e) { return param_o(e.id, 0, 2); }
double slopeZ(PlaneGrating e) { return param_o(e.id, 0, 3); }
dmat4 elementParams(PlaneGrating e) { return quadricData[e.id].elementParameters; }
