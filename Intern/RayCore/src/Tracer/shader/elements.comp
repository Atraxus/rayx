//////////////////////////////////////////////////////////////////
// This module defines functions to access the elements in a practical way.
//////////////////////////////////////////////////////////////////

/**************************************************************
 *                    Helper Structs
 **************************************************************/
struct Mirror { uint id; };
struct Grating { uint id; };
struct Slit { uint id; };
struct Rzp { uint id; };
struct ImagePlane { uint id; };

double param_e(uint id, uint i) { return elements[id].m_elementParams[i]; }
double param_s(uint id, uint i) { return elements[id].m_surfaceParams[i]; }
double param_x(uint id, uint i) { return elements[id].m_cutoutParams[i]; }

/**************************************************************
 *      element-type independent access functions:
 **************************************************************/
double type(uint id) { return elements[id].m_type; }
double surfaceType(uint id) { return elements[id].m_surfaceType; }
double cutoutType(uint id) { return elements[id].m_cutoutType; }
double material(uint id) { return elements[id].m_material; }
double azimuthalAngle(uint id) { return elements[id].m_azimuthalAngle; }
dmat4 inTrans(uint id) { return elements[id].m_inTrans; }
dmat4 outTrans(uint id) { return elements[id].m_outTrans; }
double slopeX(uint id) { return elements[id].m_slopeError[0]; }
double slopeZ(uint id) { return elements[id].m_slopeError[1]; }

// only usable for STY_TOROID.
double longRadius(uint id) {
    if (surfaceType(id) != STY_TOROID) {
        throw("You cannot use longRadius on this surface!");
    }
    return param_s(id, 0);
}

double shortRadius(uint id) {
    if (surfaceType(id) != STY_TOROID) {
        throw("You cannot use shortRadius on this surface!");
    }
    return param_s(id, 1);
}

/**************************************************************
 *                    Slit
 **************************************************************/
double beamstopWidth(Slit e) { return param_e(e.id, 0); }
double beamstopHeight(Slit e) { return param_e(e.id, 1); }
double gapCutoutType(Slit e) { return param_e(e.id, 2); }
double gapCutoutParam0(Slit e) { return param_e(e.id, 3); }
double gapCutoutParam1(Slit e) { return param_e(e.id, 4); }
double gapCutoutParam2(Slit e) { return param_e(e.id, 5); }

/**************************************************************
 *                    RZP
 **************************************************************/
double curvatureType(Rzp e) { return param_e(e.id, 4); }
double elementOffsetZ(Rzp e) { return param_e(e.id, 14); }
double longRadius(Rzp e) { return param_s(e.id, 0); }
double shortRadius(Rzp e) { return param_s(e.id, 1); }
double slopeX(Rzp e) { return slopeX(e.id); }
double slopeZ(Rzp e) { return slopeZ(e.id); }

/**************************************************************
 *                    Grating
 **************************************************************/
double slopeX(Grating e) { return slopeX(e.id); }
double slopeZ(Grating e) { return slopeZ(e.id); }

/**************************************************************
 *                    Mirror
 **************************************************************/
double azimuthalAngle(Mirror e) { return azimuthalAngle(e.id); }
double slopeX(Mirror e) { return slopeX(e.id); }
double slopeZ(Mirror e) { return slopeZ(e.id); }
double material(Mirror e) { return material(e.id); }
