/**
 * calculates resulting ray for a slit
 * @param r				ray to trace in element coordinates
 * @param elementIndex	index of element in data buffer
 * @param ctr			counter for random number generator, always inout
 * @param intersection	intersection point in ELEMENT coordinates
 *
 * output: diffracted Ray with intersection point as position, reflection as direction in beam coordinates and possibly modified weight in ELEMENT
 * coordinates
 */
Ray traceSlit(Ray r, Slit slit, INOUT(uint64_t) ctr, dvec4 intersection) {
    // store old position, needed for pathlength calculation
    dvec3 old_position = r.m_position;

    // dvec4 normal = intersectionPoint(r, q.surfaceParams); // if it is not sure whether the given intersection is correct, use this (recalculate the
    // intersection)
    setIntersectionPoint(r, surfaceParams(slit), intersection);

    // add the travelled distance from the previous position to the new intersection to pathlength (both are in the same coordinate system so we do
    // not need to transform back to world coordinates??)
    r.m_pathLength += length(old_position - r.m_position);
    r.m_lastElement = slit.id + 1;

    double x_extent = width(slit);
    double y_extent = height(slit);
    double xStop    = beamstopWidth(slit);
    double yStop    = beamstopHeight(slit);

    // slit lies in x-y plane instead of x-z plane as other elements
    bool withinSlitBounds = wasteBox(r.m_position[0], r.m_position[1], x_extent, y_extent);
    bool outsideOfBeamstop = stopBox(r.m_position[0], r.m_position[1], xStop, yStop);

    if (!withinSlitBounds || !outsideOfBeamstop) {
        takeFinalSnapshot(r, W_ABSORBED);
        return r;
    }

    double psi        = -r8_asin(r.m_direction.y);
    double phi        = r8_asin(r.m_direction.x / r8_cos(psi));
    double delPhi     = 0;
    double delPsi     = 0;
    int iopt          = 1;                             // 1 = slit, 3 = zone plate
    double wavelength = hvlam(r.m_energy);
    diffraction(iopt, x_extent, y_extent, wavelength, delPhi, delPsi, ctr);
    phi = phi + delPhi;
    psi = psi + delPsi;

    // new direction from angles
    cosini(r, phi, psi);

    r.m_order = 0;
    return r;
}

/**
 * calculates resulting ray for a toroid
 * @param r				ray to trace in element coordinates
 * @param elementIndex	index of element in data buffer
 * @param ctr			counter for random number generator, always inout
 * @param intersection	intersection point in ELEMENT coordinates
 *
 * output: reflected Ray with intersection point as position, reflection as direction in ELEMENT coordinates and possibly modified weight
 */
Ray traceToroid(Ray r, ToroidMirror tor, INOUT(uint64_t) ctr, ALLOW_UNUSED dvec4 intersectionPoint) { // TODO fix unused var
    // store old position, needed for pathlength calculation
    dvec3 old_position = r.m_position;

    // TODO use the given intersection point instead of recalculating it (still need to calculate the normal)
    dvec4 normal = iteratTo(r, longRadius(tor), shortRadius(tor));
    double azimuthal_angle = azimuthalAngle(tor);

    // add the travelled distance from the previous position to the new intersection to pathlength (both are in the same coordinate system so we do
    // not need to transform back to world coordinates??)
    r.m_pathLength += length(old_position - r.m_position);
    r.m_lastElement = tor.id + 1;

    // tanger/slope Error
    normal        = tanger(normal, slopeX(tor), slopeZ(tor), 0, ctr);

    r.m_direction = dvec3(reflect(dvec4(r.m_direction, 0), normal));

    double real_S, real_P, delta;
    double incidence_angle = getIncidenceAngle(r, normal);  // getTheta
    int mat = int(material(tor));
    if (mat != -2) {
        efficiency(r, real_S, real_P, delta, incidence_angle, mat);

        bool absorbed = update_stokes(r, real_S, real_P, delta, azimuthal_angle, ctr);
        if (absorbed) {
            takeFinalSnapshot(r, W_ABSORBED);
        }
        r.m_order = 0;
    }
    return r;
}

/**
 * calculates resulting ray for an RZP
 * @param r				ray to trace in element coordinates
 * @param elementIndex	index of element in data buffer
 * @param ctr			counter for random number generator, always inout
 * @param intersection	intersection point in ELEMENT coordinates
 *
 * output: reflected Ray with intersection point as position, reflection as direction in ELEMENT coordinates and possibly modified weight
 */
Ray traceRZP(Ray r, Rzp rzp, INOUT(uint64_t) ctr, dvec4 intersection) {
    double element_offset_z = elementOffsetZ(rzp);
    r.m_position.z            = r.m_position.z - element_offset_z;

    // store old position, needed for pathlength calculation
    dvec3 old_position = r.m_position;

    dvec4 normal;
    // RZP can be plane, toroidal or spherical curvature type. Use intersectionPoint for all except toroidal
    int CURVATURE_TYPE = int(curvatureType(rzp));
    if (CURVATURE_TYPE != 1) {
        normal = setIntersectionPoint(r, surfaceParams(rzp), intersection);
    } else {
        normal             = iteratTo(r, longRadius(rzp), shortRadius(rzp));
    }

    // add the travelled distance from the previous position to the new intersection to pathlength (both are in the same coordinate system so we do
    // not need to transform back to world coordinates??)
    r.m_pathLength += length(old_position - r.m_position);
    r.m_lastElement = rzp.id + 1;

    dmat4 e = elementParams(rzp);
    int IMAGE_TYPE        = int(e[0][0]);
    int RZP_TYPE          = int(e[0][1]);
    int DERIVATION_METHOD = int(e[0][2]);
    double risag          = e[2][0];
    double rosag          = e[2][1];
    double rimer          = e[2][2];
    double romer          = e[2][3];
    double d_alpha        = e[3][0];
    double d_beta         = e[3][1];
    double d_ord          = e[1][1];
    double zOffsetCenter  = e[1][3];
    ;  // fresnel center z offset
    double WL            = hvlam(r.m_energy);
    double WL0           = 1e-06 * e[0][3];  // source energy/design energy
    double Ord           = e[1][2];
    int additional_order = int(e[3][3]);

    // calculate the RZP line density for the position of the intersection on the RZP
    double DX, DZ;
    RZPLineDensity(r, normal, IMAGE_TYPE, RZP_TYPE, DERIVATION_METHOD, zOffsetCenter, risag, rosag, rimer, romer, d_alpha, d_beta, d_ord, WL0, DX,
                   DZ);

    // tanger/slope Error
    normal        = tanger(normal, slopeX(rzp), slopeZ(rzp), 0, ctr);

    // if additional zero order should be traced, approx. half of the rays are randomly chosen to be traced in order 0 (= ordinary reflection) instead
    // of the given order
    if (additional_order == 1) {
        if (squaresDoubleRNG(ctr) > 0.5) Ord = 0;
    }

    // only 2D case, not 2 1D gratings with 90 degree rotation as in old RAY
    double az = WL * DZ * Ord * 1e-6;
    double ax = WL * DX * Ord * 1e-6;
    r         = refrac2D(r, normal, az, ax);

    if (r.m_weight == W_BEYOND_HORIZON) {
        takeFinalSnapshot(r, W_BEYOND_HORIZON);
    }

    r.m_order   = Ord;

    r.m_position.z += element_offset_z;
    return r;
}

/**
 * calculates resulting ray for plane grating element
 * separate from "generalGratingElement" because normal is always (0,-1,0). Therefore, the refrac function can be simplified such that it does not use
 * trigonom. functions
 * @param r				ray to trace in element coordinates
 * @param elementIndex	index of element in data buffer
 * @param ctr			counter for random number generator, always inout
 * @param intersection	intersection point in ELEMENT coordinates
 * @return				reflected Ray with intersection point as position, reflection as direction in ELEMENT coordinates and possibly modified weight
 */
Ray tracePlaneGrating(Ray r, PlaneGrating pg, INOUT(uint64_t) ctr, dvec4 intersection) {
    // store old position, needed for pathlength calculation
    dvec3 old_position = r.m_position;

    // calculate intersection point with element surface and return surface normal at this point
    dvec4 normal = setIntersectionPoint(r, surfaceParams(pg), intersection);

    // modify normal according to slope error
    normal = tanger(normal, slopeX(pg), slopeZ(pg), 0, ctr);

    // vls parameters passed in q.elementParameters
    dmat4 e = elementParams(pg);
    double WL                 = hvlam(r.m_energy);
    double lineDensity        = e[0][2];
    double orderOfDiffraction = e[0][3];
    double b_params[6]        = {e[1][2], e[1][3], e[2][0],e[2][1], e[2][2], e[2][3]};
    int additional_order      = int(e[3][3]);

    // a = WL * linedensity * order * 1e-06
    double a = vlsGrating(lineDensity, r.m_position.z, b_params) * WL * orderOfDiffraction * 1e-06;
    r.m_order  = orderOfDiffraction;

    // if additional zero order should be traced, approx. half of the rays are randomly chosen to be traced in order 0 (= ordinary reflection) instead
    // of the given order
    if (additional_order == 1) {
        if (squaresDoubleRNG(ctr) > 0.5) a = 0;
    }

    // add the travelled distance from the previous position to the new intersection to pathlength (both are in the same coordinate system so we do
    // not need to transform back to world coordinates??)
    r.m_pathLength += length(old_position - r.m_position);
    r.m_lastElement = pg.id + 1;

    // calculate refracted ray
    r = refrac_plane(r, normal, a);

    if (r.m_weight == W_BEYOND_HORIZON) {
        takeFinalSnapshot(r, W_BEYOND_HORIZON);
    }

    return r;
}

/**
 * calculates resulting ray for general grating element
 * @param r				ray to trace in element coordinates
 * @param elementIndex	index of element in data buffer
 * @param ctr			counter for random number generator, always inout
 * @param intersection	intersection point in ELEMENT coordinates
 * @return reflected Ray with intersection point as position, reflection as direction in ELEMENT coordinates and possibly modified weight
 */
Ray traceGeneralGrating(Ray r, GeneralGrating gg, INOUT(uint64_t) ctr, dvec4 intersection) {
    // store old position, needed for pathlength calculation
    dvec3 old_position = r.m_position;

    dvec4 normal = setIntersectionPoint(r, surfaceParams(gg), intersection);
    // normal = normalize(dvec4(-r.m_position.x, -radius - r.m_position[1]*ISIG, -r.m_position[2], 0));

    // add the travelled distance from the previous position to the new intersection to pathlength (both are in the same coordinate system so we do
    // not need to transform back to world coordinates??)
    r.m_pathLength += length(old_position - r.m_position);
    r.m_lastElement = gg.id + 1;

    // modify normal according to slope error
    normal        = tanger(normal, slopeX(gg), slopeZ(gg), 0, ctr);

    // vls parameters passed in q.elementParameters
    dmat4 e = elementParams(gg);
    double WL                 = hvlam(r.m_energy);
    double lineDensity        = e[0][2];
    double orderOfDiffraction = e[0][3];
    double b_params[6] = {e[1][2], e[1][3], e[2][0], e[2][1], e[2][2], e[2][3]};

    // linedensity = WL * default_linedensity * order * 1e-06
    double linedensity = vlsGrating(lineDensity, r.m_position.z, b_params) * WL * orderOfDiffraction * 1e-06;
    r.m_order            = orderOfDiffraction;
    // no additional zero order here?

    // refraction
    r = refrac(r, normal, linedensity);

    if (r.m_weight == W_BEYOND_HORIZON) {
        takeFinalSnapshot(r, W_BEYOND_HORIZON);
    }

    return r;
}

/**
 * calculates resulting ray for a mirror element
 * @param r				ray to trace in element coordinates
 * @param elementIndex	index of element in data buffer
 * @param ctr			counter for RNG
 * @param intersection	intersection point in ELEMENT coordinates
 *
 * output: reflected Ray with intersection point as position, reflection as direction in ELEMENT coordinates and possibly modified weight
 */
Ray traceMirror(Ray r, BasicMirror m, INOUT(uint64_t) ctr, dvec4 intersection) {
    // store old position, needed for pathlength calculation
    dvec3 old_position = r.m_position;

    // calculate intersection point and normal at intersection point
    dvec4 normal           = setIntersectionPoint(r, surfaceParams(m), intersection);
    double azimuthal_angle = azimuthalAngle(m);

    // add the travelled distance from the previous position to the new intersection to pathlength (both are in the same coordinate system so we do
    // not need to transform back to world coordinates??)
    r.m_pathLength += length(old_position - r.m_position);
    r.m_lastElement = m.id + 1;

    // take the slope error into account for the normal
    normal        = tanger(normal, slopeX(m), slopeZ(m), 0, ctr);  // option 0 = default, cartesian normal

    // calculate the new direction after the reflection
    r.m_direction = dvec3(reflect(dvec4(r.m_direction, 0), normal));

    double real_S, real_P, delta;
    double incidence_angle = getIncidenceAngle(r, normal);  // getTheta
    int mat = int(material(m));
    if (mat != -2) {
        efficiency(r, real_S, real_P, delta, incidence_angle, mat);

        bool absorbed = update_stokes(r, real_S, real_P, delta, azimuthal_angle, ctr);
        if (absorbed) {
            takeFinalSnapshot(r, W_ABSORBED);
        }
        r.m_order = 0;
    }
    return r;
}

/**
 * calculates resulting ray for an ellipsoid mirror element
 * @param r				ray to trace in element coordinates
 * @param elementIndex	index of element in data buffer
 * @param ctr			counter for RNG
 * @param intersectionPoint	intersection point in ELEMENT coordinates
 *
 * @return reflected Ray with intersection point as position, reflection as direction in ELEMENT coordinates and possibly modified weight
 */
Ray traceEllipsoidMirror(Ray r, EllipsoidMirror ell, INOUT(uint64_t) ctr, dvec4 intersection) {
    double sin_tangentAngle = sinTangentAngle(ell);
    double cos_tangentAngle = cosTangentAngle(ell);

    // store old position, needed for pathlength calculation
    dvec3 old_position = r.m_position;

    // calculate intersection point and normal at intersection point
    dvec4 normal = setIntersectionPoint(r, surfaceParams(ell), intersection);
    double azimuthal_angle = azimuthalAngle(ell);

    r = rotationAroundX(r, -sin_tangentAngle, cos_tangentAngle);  // change to coordinate system of mirror
    r = rotationAroundX(r, sin_tangentAngle, cos_tangentAngle);  // change to coordinate system of curvation

    // add the travelled distance from the previous position to the new intersection to pathlength (both are in the same
    // coordinate system so we do not need to transform back to world coordinates??)
    r.m_pathLength += length(old_position - r.m_position);
    r.m_lastElement = ell.id + 1;

    // take the slope error into account for the normal
    normal = tanger(normal, slopeX(ell), slopeZ(ell), 0, ctr);  // option 0 = default, cartesian normal

    // calculate the new direction after the reflection
    r.m_direction = dvec3(reflect(dvec4(r.m_direction, 0), normal));

    double real_S, real_P, delta;
    double incidence_angle = getIncidenceAngle(r, normal);  // getTheta
    int mat = int(material(ell));
    if (mat != -2) {
        efficiency(r, real_S, real_P, delta, incidence_angle, mat);

        bool absorbed = update_stokes(r, real_S, real_P, delta, azimuthal_angle, ctr);
        if (absorbed) {
            takeFinalSnapshot(r, W_ABSORBED);
        }
        r.m_order = 0;
    }
    return r;
}

/**
 * the image plane is always parallel to x-y-plane of ray coordinate system in which the rays are when they leave the previous element
 * -> defined by distance to that element
 * @param r		ray to trace in element coordinates
 * @param elementIndex	index of element in data buffer
 * @param intersection	intersection point of ray with optical element in ELMENT coordinates
 * @return  reflected Ray with intersection point as position in ELEMENT coordinates
 */
Ray traceImagePlane(Ray r, ALLOW_UNUSED ImagePlane ip, dvec4 intersection) { // TODO fix unused var
    // path length in element coordinates
    dvec3 intersection_xyz = dvec3(intersection);
    r.m_pathLength += length(r.m_position - intersection_xyz);
    r.m_position = intersection_xyz;
    r.m_lastElement = ip.id + 1;
    return r;
}
