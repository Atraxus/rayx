/// Each `trace*` function gets a `Ray r` (in element-coords), the element itself, a randomness counter and the `Collision col`.
/// `col.hitpoint` expresses where the given ray r will hit the element (in element-coords).
/// `col.normal` expresses the normal of the surface, at `col.hitpoint` (in element-coords).
/// The ray has already been moved to the hitpoint, and it's lastElement has been set accordingly.
///
/// The `trace*` functions, will
/// - change the rays direction, typically by reflecting using the normal
/// - change the rays stokes vector
/// - potentially absorb the ray (by calling `takeFinalSnapshot(_, W_ABSORBED)`)

Ray traceSlit(Ray r, Slit slit, INOUT(uint64_t) ctr, ALLOW_UNUSED Collision col) {
    double xStop    = beamstopWidth(slit);
    double yStop    = beamstopHeight(slit);

    // slit lies in x-y plane instead of x-z plane as other elements
    CutoutSerialized gapCut = gapCutout(slit);
    bool withinSlitBounds = inCutout(gapCut, r.m_position[0], r.m_position[1]);
    bool outsideOfBeamstop = stopBox(r.m_position[0], r.m_position[1], xStop, yStop);

    if (!withinSlitBounds || !outsideOfBeamstop) {
        takeFinalSnapshot(r, W_ABSORBED);
        return r;
    }

    double psi        = -r8_asin(r.m_direction.y);
    double phi        = r8_asin(r.m_direction.x / r8_cos(psi));
    double dPhi     = 0;
    double dPsi     = 0;
    double wavelength = hvlam(r.m_energy);

    // this was previously called "diffraction"
    if (wavelength > 0) {
        double yl = gapCut.m_params[0];
        double xl = gapCut.m_params[2];
        if (gapCut.m_type == CTYPE_RECT) {
            fraun_diff(xl, wavelength, dPhi, ctr);
            fraun_diff(yl, wavelength, dPsi, ctr);
        } else if (gapCut.m_type == CTYPE_ELLIPTICAL) {
            // xl = gapCutoutParam2(slit);
            bessel_diff(xl, wavelength, dPhi, dPsi, ctr);
        } else {
            throw("encountered Slit with unsupported gapCutout");
        }
    }

    phi = phi + dPhi;
    psi = psi + dPsi;

    // new direction from angles
    cosini(r, phi, psi);

    r.m_order = 0;
    return r;
}

Ray traceRZP(Ray r, Rzp rzp, INOUT(uint64_t) ctr, Collision col) {
    double element_offset_z = elementOffsetZ(rzp);
    r.m_position.z            = r.m_position.z - element_offset_z;

    dvec4 normal = dvec4(col.normal, 0);

    int IMAGE_TYPE        = int(param_e(rzp.id, 0));
    int RZP_TYPE          = int(param_e(rzp.id, 1));
    int DERIVATION_METHOD = int(param_e(rzp.id, 2));
    double risag          = param_e(rzp.id, 8);
    double rosag          = param_e(rzp.id, 9);
    double rimer          = param_e(rzp.id, 10);
    double romer          = param_e(rzp.id, 11);
    double d_alpha        = param_e(rzp.id, 12);
    double d_beta         = param_e(rzp.id, 13);
    double d_ord          = param_e(rzp.id, 5);
    double zOffsetCenter  = param_e(rzp.id, 7);
    ;  // fresnel center z offset
    double WL            = hvlam(r.m_energy);
    double WL0           = 1e-06 * param_e(rzp.id, 3);  // source energy/design energy
    double Ord           = param_e(rzp.id, 6);
    int additional_order = int(param_e(rzp.id, 14));

    // calculate the RZP line density for the position of the intersection on the RZP
    double DX, DZ;
    RZPLineDensity(r, normal, IMAGE_TYPE, RZP_TYPE, DERIVATION_METHOD, zOffsetCenter, risag, rosag, rimer, romer, d_alpha, d_beta, d_ord, WL0, DX, DZ);

    // tanger/slope Error
    normal        = tanger(normal, slopeX(rzp), slopeZ(rzp), 0, ctr);

    // if additional zero order should be traced, approx. half of the rays are randomly chosen to be traced in order 0 (= ordinary reflection) instead
    // of the given order
    if (additional_order == 1) {
        if (squaresDoubleRNG(ctr) > 0.5) Ord = 0;
    }

    // only 2D case, not 2 1D gratings with 90 degree rotation as in old RAY
    double az = WL * DZ * Ord * 1e-6;
    double ax = WL * DX * Ord * 1e-6;
    r         = refrac2D(r, normal, az, ax);

    if (r.m_weight == W_BEYOND_HORIZON) {
        takeFinalSnapshot(r, W_BEYOND_HORIZON);
    }

    r.m_order   = Ord;

    r.m_position.z += element_offset_z;
    return r;
}

Ray traceGrating(Ray r, Grating gg, INOUT(uint64_t) ctr, Collision col) {
    dvec4 normal = dvec4(col.normal, 0);
    // normal = normalize(dvec4(-r.m_position.x, -radius - r.m_position[1]*ISIG, -r.m_position[2], 0));

    // modify normal according to slope error
    normal        = tanger(normal, slopeX(gg), slopeZ(gg), 0, ctr);

    // vls parameters passed in q.elementParams
    double WL                 = hvlam(r.m_energy);
    double lineDensity        = param_e(gg.id, 2);
    double orderOfDiffraction = param_e(gg.id, 3);
    double b_params[6] = {param_e(gg.id, 6), param_e(gg.id, 7), param_e(gg.id, 8), param_e(gg.id, 9), param_e(gg.id, 10), param_e(gg.id, 11)};

    // linedensity = WL * default_linedensity * order * 1e-06
    double linedensity = vlsGrating(lineDensity, r.m_position.z, b_params) * WL * orderOfDiffraction * 1e-06;
    r.m_order            = orderOfDiffraction;
    // no additional zero order here?

    // refraction
    r = refrac(r, normal, linedensity);

    if (r.m_weight == W_BEYOND_HORIZON) {
        takeFinalSnapshot(r, W_BEYOND_HORIZON);
    }

    return r;
}

Ray traceMirror(Ray r, Mirror m, INOUT(uint64_t) ctr, Collision col) {
    // calculate intersection point and normal at intersection point
    dvec4 normal = dvec4(col.normal, 0);
    double azimuthal_angle = azimuthalAngle(m);

    // take the slope error into account for the normal
    normal = tanger(normal, slopeX(m), slopeZ(m), 0, ctr);  // option 0 = default, cartesian normal

    // calculate the new direction after the reflection
    r.m_direction = dvec3(reflect(dvec4(r.m_direction, 0), normal));

    double real_S, real_P, delta;
    double incidence_angle = getIncidenceAngle(r, normal);  // getTheta
    int mat = int(material(m));
    if (mat != -2) {
        efficiency(r, real_S, real_P, delta, incidence_angle, mat);

        bool absorbed = update_stokes(r, real_S, real_P, delta, azimuthal_angle, ctr);
        if (absorbed) {
            takeFinalSnapshot(r, W_ABSORBED);
        }
        r.m_order = 0;
    }
    return r;
}

Ray traceImagePlane(Ray r, ALLOW_UNUSED ImagePlane ip, ALLOW_UNUSED Collision col) {
    // doesn't need to do anything.
    return r;
}
